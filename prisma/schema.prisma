generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Course {
  id          String     @id @default(uuid()) @map("id")
  userId      String
  title       String
  description String?
  imageUrl    String?
  isPublished Boolean    @default(false)

  attachments Attachment[]
  chapters    Chapter[] 

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Attachment {
  id        String     @id @default(uuid()) @map("id")
  name      String
  url       String

  courseId  String
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String     @id @default(uuid()) @map("id")
  title       String
  description String?
  textUrl     String?
  position    Int
  isPublished Boolean    @default(false)

  courseId    String
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([courseId])
}

model UserProgress {
  id          String     @id @default(uuid()) @map("id")
  userId      String

  chapterId   String
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean    @default(false)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model StripeCustomer {
  id                String     @id @default(uuid()) @map("id")
  userId            String     @unique
  stripeCustomerId  String     @unique

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}
